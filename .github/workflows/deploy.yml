name: Terraform Deploy

on:
  pull_request:
    branches: [ "main" ]
  push:
    branches: [ "main" ]

permissions:
  contents: read
  pull-requests: write

jobs:
  terraform:
    runs-on: ubuntu-latest
    environment: production

    # run all shell steps inside terraform/ by default
    defaults:
      run:
        working-directory: terraform

    env:
      ARM_USE_OIDC: false
      TF_INPUT: 0
      TF_IN_AUTOMATION: 1

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure login (service principal JSON)
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Show working dir and files (debug)
        run: |
          echo "PWD: $(pwd)"
          echo "Repo tree (top):"
          ls -la ..
          echo "Terraform dir contents:"
          ls -la
          echo "Terraform version:"
          terraform -version || true

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.8

      - name: Terraform Init (with debug)
        run: |
          set -euxo pipefail
          terraform init -upgrade -no-color

      - name: Terraform Format Check
        run: terraform fmt -check -recursive

      - name: Terraform Validate
        run: terraform validate -no-color

      - name: Terraform Plan (PR)
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color -out=tfplan.out | tee plan.txt

      - name: Upload Plan Artifact (PR)
        if: github.event_name == 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: |
            terraform/plan.txt
            terraform/tfplan.out
          retention-days: 14

      - name: Comment Plan on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = 'terraform/plan.txt';
            const body = fs.existsSync(path)
              ? ['**Terraform Plan**:', '```', fs.readFileSync(path, 'utf8').slice(0, 65000), '```'].join('\n')
              : 'Terraform plan file not found.';
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body
            });

      - name: Terraform Plan (main)
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform plan -no-color -out=tfplan.out

      - name: Terraform Apply (main)
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve tfplan.out

      - name: Upload Terraform State (main)
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: actions/upload-artifact@v4
        with:
          name: tfstate-main
          path: |
            terraform/terraform.tfstate
            terraform/terraform.tfstate.backup
          retention-days: 30

      - name: Deploy Sample Web Page (main)
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          RG_NAME=$(terraform output -raw resource_group_name)
          APP_NAME=$(terraform output -raw web_app_name)
          echo "<!DOCTYPE html><html><head><meta charset='utf-8'><title>OK</title></head><body><h1>Pozdrav iz Terraform-a ðŸ‘‹</h1><p>App je privatan i dostupan samo iz VNet-a.</p></body></html>" > index.html
          zip site.zip index.html
          az webapp deployment source config-zip --resource-group "$RG_NAME" --name "$APP_NAME" --src-path site.zip
