name: Terraform Deploy

on:
  workflow_dispatch: {}
  pull_request:
    branches: [ "main" ]
  push:
    branches: [ "main" ]

permissions:
  contents: read
  pull-requests: write

jobs:
  terraform:
    runs-on: ubuntu-latest
    environment: production
    defaults:
      run:
        working-directory: terraform

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.8

      - name: Terraform Init
        run: terraform init -input=false -upgrade

      - name: Terraform Format (check)
        run: terraform fmt -check

      - name: Terraform Validate
        run: terraform validate -no-color

      - name: Terraform Plan
        run: terraform plan -no-color -input=false -out=tfplan

      - name: Save human-readable plan
        run: terraform show -no-color tfplan > plan.txt

      - name: Upload plan artifact
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: terraform/plan.txt

      - name: Comment PR with Plan
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const plan = fs.readFileSync('terraform/plan.txt','utf8');
            const text = plan.length > 60000
              ? "_(truncated to last 60k chars)_\n" + plan.slice(-60000)
              : plan;
            const body = "### Terraform Plan\n```hcl\n" + text + "\n```";
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body
            });

      - name: Terraform Apply (on main)
        if: (github.ref == 'refs/heads/main') && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
        run: terraform apply -auto-approve -input=false tfplan

      - name: Upload Terraform state (artifact)
        if: (github.ref == 'refs/heads/main') && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
        uses: actions/upload-artifact@v4
        with:
          name: tfstate-main
          path: |
            terraform/terraform.tfstate
            terraform/terraform.tfstate.backup
            terraform/.terraform.lock.hcl
          retention-days: 14

      - name: Show Terraform Outputs
        id: outputs
        run: |
          echo "web_app_hostname=$(terraform output -raw web_app_hostname)" >> $GITHUB_OUTPUT

      - name: Negative test (Web App should NOT be reachable from public internet)
        if: github.ref == 'refs/heads/main'
        run: |
          echo "Trying to curl Web App URL (expected to fail)..."
          URL="https://${{ steps.outputs.outputs.web_app_hostname }}"
          set +e
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" --max-time 10 "$URL")
          set -e
          echo "HTTP response: $RESPONSE"
          if [ "$RESPONSE" -eq 200 ]; then
            echo "::error ::Web App responded with 200 OK — it is PUBLICLY accessible, which breaks the security requirement."
            exit 1
          else
            echo "✅ Negative test passed: Web App is not reachable from the internet (response code: $RESPONSE)."
          fi