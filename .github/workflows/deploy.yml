name: Terraform Deploy

on:
  push:
    branches: [ "main" ]
    paths:          # Only trigger when relevant paths change
      - 'terraform/**'
      - 'app/**'
      - 'www/**'
      - '.github/workflows/**'
  pull_request:
    branches: [ "main" ]
    paths:
      - 'terraform/**'
      - 'app/**'
      - 'www/**'
      - '.github/workflows/**'
  workflow_dispatch:

permissions:
  contents: read
  id-token: write
  actions: read

jobs:
  build_and_deploy_infra:
    name: Build and Deploy Infrastructure
    environment: production
    runs-on: ubuntu-latest
    outputs:
      acr_name: ${{ steps.tfout.outputs.acr_name }}
      acr_login_server: ${{ steps.tfout.outputs.acr_login_server }}
      resource_group_name: ${{ steps.tfout.outputs.resource_group_name }}
      web_app_name: ${{ steps.tfout.outputs.web_app_name }}
    defaults:
      run:
        shell: bash
        working-directory: terraform

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: terraform init -input=false

      - name: Terraform Validate
        run: terraform validate -no-color

      - name: Terraform Plan
        run: terraform plan -no-color -input=false -out=tfplan

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'
        run: terraform apply -auto-approve -input=false tfplan
      
      - name: Get Terraform Outputs
        if: github.ref == 'refs/heads/main'
        id: tfout
        run: |
          echo "acr_name=$(terraform output -raw acr_name)" >> $GITHUB_OUTPUT
          echo "acr_login_server=$(terraform output -raw acr_login_server)" >> $GITHUB_OUTPUT
          echo "resource_group_name=$(terraform output -raw resource_group_name)" >> $GITHUB_OUTPUT
          echo "web_app_name=$(terraform output -raw web_app_name)" >> $GITHUB_OUTPUT

      # NEW: Publish tfstate for rollback/destroy workflow
      - name: Upload tfstate (for rollback)
        if: always() && github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: tfstate-main
          path: |
            ./terraform.tfstate
            ./.terraform.lock.hcl
          if-no-files-found: error
          retention-days: 30

  deploy_app_code:
    name: Build and Deploy Application
    needs: build_and_deploy_infra
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Azure login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: ACR Login
        run: az acr login --name ${{ needs.build_and_deploy_infra.outputs.acr_name }}

      - name: Build and Push Docker Image
        run: |
          ACR_SERVER=${{ needs.build_and_deploy_infra.outputs.acr_login_server }}
          IMAGE_NAME="secureapp"
          
          docker build -t $IMAGE_NAME -f terraform/app/Dockerfile terraform
          
          docker tag $IMAGE_NAME $ACR_SERVER/$IMAGE_NAME:${{ github.sha }}
          docker tag $IMAGE_NAME $ACR_SERVER/$IMAGE_NAME:latest
          
          docker push $ACR_SERVER/$IMAGE_NAME:${{ github.sha }}
          docker push $ACR_SERVER/$IMAGE_NAME:latest
      
      - name: Restart Web App to pull latest image
        run: |
          az webapp restart \
            --name ${{ needs.build_and_deploy_infra.outputs.web_app_name }} \
            --resource-group ${{ needs.build_and_deploy_infra.outputs.resource_group_name }}
